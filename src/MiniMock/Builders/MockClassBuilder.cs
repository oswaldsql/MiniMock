namespace MiniMock.Builders;

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;

public static class MockClassBuilder
{
    public static string Build(IEnumerable<ISymbol> typeSymbols, SourceProductionContext context)
    {
        var mocks = typeSymbols.OfType<INamedTypeSymbol>().OrderBy(t => t.Name).ToArray();

        if(!mocks.Any())
        {
            return "//No mocks found.";
        }

        var builder = new CodeBuilder();

        builder.Add($$"""
                     // Generated by MiniMock on {{DateTime.Now}}
                     #nullable enable
                     namespace MiniMock {
                     ->

                     /// <summary>
                     /// Factory for creating mock objects.
                     /// </summary>
                     internal static class Mock {
                     ->
                     """);

        foreach (var symbol in mocks)
        {
            var typeArguments = symbol.TypeArguments;
            var containingNamespace = symbol.ContainingNamespace;
            var symbolName = symbol.Name;

            if (typeArguments.Length > 0)
            {
                var types = string.Join(", ", typeArguments.Select(t => t.Name));
                var name = $"MockOf_{symbolName}<{types}>";
                var methodName = symbolName;
                var constraints = typeArguments.ToConstraints();

                var cref = symbol.ToString().Replace('<','{').Replace('>','}');
                builder.Add(
                    $"""

                      /// <summary>
                      /// Creates a mock object for <see cref="{cref}"/>.
                      /// </summary>
                      /// <param name="config">Optional configuration for the mock object.</param>
                      /// <returns>The mock object for <see cref="{cref}"/>.</returns>
                      """);
                builder.Add($"internal static {symbol} {methodName}<{types}>(System.Action<{containingNamespace}.{name}.Config>? config = null) {constraints} => {containingNamespace}.{name}.Create(config);");
            }
            else
            {
                builder.Add(
                    $"""

                      /// <summary>
                      /// Creates a mock object for <see cref="{symbol}"/>.
                      /// </summary>
                      /// <param name="config">Optional configuration for the mock object.</param>
                      /// <returns>The mock object for <see cref="{symbol}"/>.</returns>
                      """);
                var name = "MockOf_" + symbolName;
                var methodName = symbolName;
                builder.Add($"internal static {symbol} {methodName}(System.Action<{containingNamespace}.{name}.Config>? config = null) => {containingNamespace}.{name}.Create(config);");
            }
        }

        builder.Add("""
                   <-
                   }
                   <-
                   }
                   """);

        return builder.ToString();
    }
}
