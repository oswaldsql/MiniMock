namespace MiniMock;

using System;
using System.Linq;
using Microsoft.CodeAnalysis;

public static class MockClassBuilder
{
    public static string Build(ISymbol?[] typeSymbols, SourceProductionContext context)
    {
        var result = new CodeBuilder();

        result.Add("// Generated by MiniMock on " + DateTime.Now);
        result.Add("#nullable enable");
        result.Add("namespace MiniMock {").Indent();

        result.Add("public class Mock {").Indent();

        foreach (var symbol in typeSymbols)
        {
            var name = symbol.Name + "Mock";
            var methodName = symbol.Name;
            var typeArguments = ((INamedTypeSymbol)symbol).TypeArguments;
            if (typeArguments.Length > 0)
            {
                var types = string.Join("_", typeArguments.Select(t => t.Name));
                name = $"{symbol.Name}Mock_{types}";
                methodName = symbol.Name + "_" + types;
            }

            result.Add($"internal static {symbol} {methodName}(System.Action<{symbol.ContainingNamespace}.{name}.Config>? mock = null) => new {symbol.ContainingNamespace}.{name}(mock);");
        }

        result.Unindent().Add("}");

        result.Unindent().Add("}");
        return result.ToString();
    }
}
